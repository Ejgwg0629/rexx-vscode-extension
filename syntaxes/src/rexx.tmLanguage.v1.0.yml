#
# this is a rexx syntax highlighter
# it's textMate syntax based
#
# I have referenced ...
#
# I have also modfied the js-yaml module in this repo to let it do what I want:
#   - the most important one, add no space after each line of a multiline block scalar
#
---
name: rexx
scopeName: source.rexx

# actually, this doesn't work in vscode..
# but for integrality..
firstLineMatch: /\*.*(?i:rexx)\b
foldingStartMarker: (/\*|\b(do|select)\b)
foldingStopMarker: (\*/|\bend\b)
fileTypes:
- rex
- rxj
- rexx
- rx

#
# patterns - main entry
#
patterns:
- include: "#comment"
- include: "#label"

# assignments, keyword instructions, or commands
- include: "#instruction"


#
# repository
#
repository:

  # rexx comments recusively include comments,
  # and if you don't close a comment inside another comment,
  # all the remain source will be treated as comment..
  comment:
    patterns:
    - name: comment.block.rexx
      begin: /\*
      end: \*/
      patterns:
      - include: "#comment"

  # there is only one way to define a function in rexx
  # user-defined-function: ...
  label:
    patterns:
    # - name: entity.name.function
    - name: storage.type.function.rexx
      match: >-
        ^\s*
        [A-Za-z@#$!?_]
        [A-Za-z@#$!?_0-9]*
        :

  instruction:
    patterns:
    - include: "#string"

    # temporarily
    - include: "#function-call"
    - include: "#keyword"
    - include: "#constant"
    - include: "#operator"
    - include: "#variable"

  string:
    patterns:
    - comment: binary string
      name: constant.numeric.binary.rexx
      match: >-
        (['"])[01 ]+\1(?i:b)(?![A-Za-z0-9@#$¢.!?_])

    - comment: hexadecimal string
      name: constant.numeric.hexadecimal.rexx
      match: >-
        (['"])[0-9a-fA-F ]+\1(?i:x)(?![A-Za-z0-9@#$¢.!?_])

    - name: string.quoted.double.rexx
      begin: '(?<!")"'
      end: >-
        "(?!")([xXbB][A-Za-z0-9@#$¢.!?_]*)?
      endCaptures:
        1:
          name: invalid.rexx
      patterns:
      - name: constant.character.escape.rexx
        match: '""'

    - name: string.quoted.single.rexx
      begin: "(?<!')'"
      end: >-
        '(?!')([xXbB][A-Za-z0-9@#$¢.!?_]*)?
      endCaptures:
        1:
          name: invalid.rexx
      patterns:
      - name: constant.character.escape.rexx
        match: "''"


  #
  # these are all temporarily..
  # will make them more structural some day..
  #
  function-call:
    patterns:
    - comment: let's make internal functions shown in another color
      begin: >-
        \b(?i)
        (abbrev|abs|address|arg|bitand|bitor|bitxor|b2x|
        center|centre|compare|condition|copies|c2d|c2x|
        datatype|date|dbcs|delstr|delword|digits|d2c|d2x|
        errortext|find|form|format|fuzz|getmsg|index|insert|
        justify|lastpos|left|length|linesize|listdsi|max|min|
        msg|mvsvar|outtrap|overlay|pos|prompt|queued|random|
        reverse|right|setlang|sign|sourceline|space|storage|
        strip|substr|subword|symbol|syscpus|sysdsn|sysvar|
        time|trace|trunslate|trunc|userid|value|verify|word|
        wordindex|wordlength|wordpos|words|xrange|x2b|x2c|x2d)
        (\()
      end: (\))
      beginCaptures:
        1:
          name: support.function.rexx
        2:
          name: meta.brace.round.rexx
      endCaptures:
        1:
          name: meta.brace.round.rexx
      patterns:
        - include: $self

    # - name: entity.name.function
    - comment: all others are user-defined functions, aren't they ?
      name: entity.name.section.rexx
      match: >-
        [A-Za-z@#$!?_0-9]+
        (?=\()

    - comment: also, we could call our functions this way.
      match: >-
        \b(call)\s+(?!on|off)
        (\S+)(?=\s)
      captures:
        1:
          name: keyword.rexx
        2:
          name: entity.name.section.rexx

    - comment: and this way..?
      match: >-
        \b(signal)\s+(?!on|off)
        (\S+)(?=\s)
      captures:
        1:
          name: keyword.rexx
        2:
          name: entity.name.section.rexx

  keyword:
    patterns:
    - name: keyword.control.italic.rexx
      match: \b(?i:do|end|if|then|else)\b(?!\.)

    - name: keyword.rexx
      begin: \bsay\b(?!\.)
      end: ;|$
      patterns:
        - include: "#comment"
        - include: "#constant"
        - include: "#function-call"
        - include: "#operator"
        - include: "#variable"

    - name: keyword.rexx
      match: >-
        \b
        (?i:do|forever|while|until|to|by|for|end|exit|if|then|
        else|iterate|leave|nop|return|select|when|otherwise|with|
        arg|drop|interpret|options|pull|push|queue|say|upper|
        trace\s+\w+|
        address\s+\w+|
        procedure(\s+expose)?|
        call(\s+(off|on)\s+(error|failure|halt)(\s+name)?)?|
        signal(\s+(off|on)\s+(error|failure|halt|novalue|syntax)(\s+name)?)?|
        numeric\s+(digits|fuzz|form(\s+(scientific|engineering|value))?)|
        parse(\s+upper)?\s+(external|numeric|source|value|var|version)?)
        \b(?!\.)

  constant:
    patterns:

    - name: constant.numeric.rexx
      match: >-
        (?<=\+|-|\*|/|\*\*|%|//|=|>|<|¬|,|by|return|exit)\s*+
        ([+-]\s*+)?
        ([0-9]+(\.)?[0-9]*(?i:e[-+]?[0-9]+)?\b|
        [0-9]*(\.)?[0-9]+(?i:e[-+]?[0-9]+)?\b)

    - name: constant.other.rexx
      match: >-
        [0-9\.][A-Za-z0-9@#$¢.!?_]*

  # need fix
  variable:
    patterns:
    - name: variable.rexx
      match: >-
        [A-Za-z@#$¢!?_][A-Za-z0-9@#$¢.!?_]*

  operator:
    patterns:
    - name: keyword.operator.rexx
      match: ([+-/*%&|()¬\\=<>])
